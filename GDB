GDB:

	----Inspect the General Purpose, Segment, EFLAGS, FPU, MMX, XMM registers on a Linux system.
				GDB must be running a application to view any registers
			Load GDB
				gdb /bin/bash
				break main
				run

			View All General Purpose/Eflags/Segmented Registers
				info registers

			To view specific info for one registers
				info registers eip
				display /x $eip
			
			To view AH and AL inside of EAX 
				info registers ah
				display /x $ah

			To view all registers including FPU/MMX/XMM
				info all-registers
				info registers all

				
	----Set GDB to use Intel instead of ATT
			set disassembly-flavor intel
			
			
	----Step Through GDB
			stepi
			or nexti
			

	----Locate the entry point of an ELF binary
				- gdb ./<application name>
					- info functions

				OR inside a linux application
				- gdb ./<application name>
					- shell readelf-h <application name>
					Then look for Entry Point Address:

					OUTPUT:
					ELF Header:
					  Magic:   7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00 
					  Class:                             ELF32
					  Data:                              2's complement, little endian
					  Version:                           1 (current)
					  OS/ABI:                            UNIX - System V
					  ABI Version:                       0
					  Type:                              EXEC (Executable file)
					  Machine:                           Intel 80386
					  Version:                           0x1
					  Entry point address:               0x8048080
					  Start of program headers:          52 (bytes into file)
					  Start of section headers:          240 (bytes into file)
					  Flags:                             0x0
					  Size of this header:               52 (bytes)
					  Size of program headers:           32 (bytes)
					  Number of program headers:         2
					  Size of section headers:           40 (bytes)
					  Number of section headers:         7
					  Section header string table index: 4
			  
	----Setup GDB to use Intel by default
				 -vim ~/.gdbinit
				<Inside vim> - set disassembly-flavor intel

				Save and exit, reopen gdb.

				To ensure it works type in gdb
					- show disassembaly-flavor
			
	----Showing Registers as EAX instead of a number
				once gdb is running with an application inside of it type the following
				
				(gdb) display/x $eax
				(gdb) display/x $ebx
				(gdb) display/x $ecx
				(gdb) display/x $edx
	
					
	----Hooking
			This is a command to set-up specific command to be ran as you step through the program	
			This is very useful if you want to display eax,ebx,ecx and edx as you use nexti
			
			
			This will print all of the following registers after nexti completes and disassemble a small amount of the source
				(gdb) define hook-stop
				> print/x $eax
				> print/x $ebx
				> print/x $ecx
				> print/x $edx
				>disassemble $eip,+10			#Note eip is the next register to be looked at so we want the next 10 lines of source after that
				>end
				
				The Hook will be removed once gdb is closed

	----Display contents of a byte, word, dword, and eflags
	
		View the contents of a db AKA Byte:
			Command: x/xb &var1
			
		View the contents of a dw AKA Word:
			Command: x/xh &var2

		View the contents of a dd AKA DWord:
			Command: x/xw &var3
	
		View the contents of the efalgs:
			Command: print $eflags