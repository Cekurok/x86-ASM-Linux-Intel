; Filename: execve-stack.asm
; Author: Brandon Dennis

; execve
; execve takes 3 arguments
; 1: filename: EX /bin/bash, 0x0
; 2: arguments for the executable(1st arg should be the filename then 2nd arg should be null or 0x0000)
; 3: envp is used for env settings, we can leave this as null: EX 0x0000

; Python code to get the instruction in HEX of the string reversed to place into the stack
; python -c 'string="////bin/bash";splitNum=8;print "\nLength: %s" % len(string[::-1]);string=string[::-1].encode("hex"); \
; string=["push 0x"+str(string[i:i+splitNum]) for i in range(0, len(string), splitNum)]; \
; print "Hex List:\n"; print("\n".join(h for h in string))'


global _start

section .text

_start:
	; STACK:
	xor eax, eax ; we first need our nulls
	push eax ; this will push a drowd of nulls onto the stack
	; STACK: 0x0000

	; this section of pushes are the string ////bin/bash from our pyhton 1 liner above
	push 0x68736162
	push 0x2f6e6962
	push 0x2f2f2f2f
	; STACK: OURSTRING, 0x0000
	
	
	mov ebx, esp ; this moves the memory address of esp(pointing to our string & nulls)
		     ; from the stack into ebx where execve is expecting the name of the application + a null
	
	push eax ; this pushes another null onto the stack
	mov edx, esp ; this now gets the memory address of the nulls we just pushed onto the stack into edx, this is for envp so it can just be null
	; STACK: 0x0000, OURSTRING, 0x0000
	
	push ebx ; this pushes the memory address of our string onto the stack
	mov ecx, esp ; this moves the address of our string from the stack to ecx
	; STACK: OURSTRING, 0x0000, OURSTRING, 0x0000
	
	mov al, 0xb ; this will load the syscall # 11
	int 0x80 ; execute the system call
	
	
